;

.program polyface_send

packet:
    pull  block	   ; wait and pull data bits word (bits 2-33)
    mov   x, osr   ; hold data bits until osr is empty
    pull  block    ; pull start bits word (bits 0-1)

    out   null, 30 ; shift to start bits

    set   y, 2     ; output start and control bits
start_bit:
    wait  1 pin 0
    wait  0 pin 0
    out   pins, 1

    jmp   y--, start_bit

    mov   osr, x   ; move data bits back into osr

    set   x, 4     ; output 4 data bytes
data_byte:
    set   y, 8     ; output 8 bits per byte
data_bit:
    wait  1 pin 0
    wait  0 pin 0
    out   pins, 1

    jmp   y--, data_bit
    jmp   x--, data_byte
    jmp   packet

% c-sdk {
static inline void polyface_send_program_init(PIO pio, uint sm, uint offset, uint pin, uint clk) {
    pio_sm_config c = polyface_send_program_get_default_config(offset);

    // Connect these GPIOs to this PIO block
    pio_gpio_init(pio, pin); // data out
    pio_gpio_init(pio, clk); // clock

    // Set the OUT pin to the provided `outpin` parameter. This is where the data is sent out
    sm_config_set_out_pins(&c, pin, 1);

    // Set the pin directions to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    // pio_sm_set_pins_with_mask(pio, sm, 1u << pin, 1u << pin);
    // pio_sm_set_pindirs_with_mask(pio, sm, 1u << pin, 1u << pin);

    // Set the IN pin to sync with clock signal.
    sm_config_set_in_pins(&c, clk);

    sm_config_set_out_shift(
        &c,
        false, // Shift-to-right = false (i.e. shift to left)
        false, // Autopull disabled
        8      // Autopull threshold = 8
    );

    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX); // Not using RX FIFO so double TX FIFO length

    // Load our configuration, and start the program from the beginning
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}
