;

.program polyface_send

packet:
    pull  block    ; wait and pull data bits word (bits 2-33)
    mov   x, osr   ; hold data bits until osr is empty

    set   y, 1     ; sets data pin to output mode
    mov   osr, y
    out   PINDIRS 1

    out   pins, 1  ; sets output low during delay

    pull  block    ; pull start bits word (bits 0-1)
    set   y, 31    ; delay a few clock cycles
delay:
    wait  1 gpio 3
    wait  0 gpio 3
    jmp   y--, delay

    set   y, 1     ; loop out start and control (2 bits)
start_bit:
    wait  1 gpio 3
    wait  0 gpio 3
    out   pins, 1
    jmp   y--, start_bit

    mov   osr, x   ; move data bits back into osr
    set   y, 31    ; loop out data bytes (32 bits)
data_bit:
    wait  1 gpio 3
    wait  0 gpio 3
    out   pins, 1

    jmp   y--, data_bit

    wait  1 gpio 3 ; wait for last bit to finish
    wait  0 gpio 3

    set   y, 0     ; sets data pin back to input mode
    mov   osr, y
    out   PINDIRS 1

    jmp   packet   ; send next packet

% c-sdk {
static inline void polyface_send_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_sm_config c = polyface_send_program_get_default_config(offset);

    // Set the pin directions to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, false);

    // Connect these GPIOs to this PIO block
    pio_gpio_init(pio, pin); // data out

    // Set the OUT pin to the provided `outpin` parameter. This is where the data is sent out
    sm_config_set_out_pins(&c, pin, 1);

    // Set the IN pin to sync with clock signal.
    sm_config_set_in_pins(&c, pin);

    sm_config_set_out_shift(
        &c,
        true,  // Shift-to-right
        false, // Autopull disabled
        32     // Autopull threshold = 32
    );

    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX); // Not using RX FIFO so double TX FIFO length

    // Load our configuration, and start the program from the beginning
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}
