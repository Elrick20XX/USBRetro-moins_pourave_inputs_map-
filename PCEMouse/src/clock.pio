;
; By Dave Shadoff (c) 2021, 2022
;
;
; Interfacing for a PC Engine mouse
;
; Two state machines are in use:
; 
; 1) Multiplexer, free-running:
;    - Take a word from FIFO, and output a nybble based on {sequence within poll cycle, state of SEL line}
;
; 2) Clocked input, which monitors the CLR joypad line for
;    high->low transitions, to set the state counter
;    
; 
; This file (clock.pio) implements State Machine #2
; -------------------------------------------------
;
; NOTE: when connected directly to PC Engine, the clock signal is a very short low-high-low signal;
;       but when connected via multitap, the clock signal is always high except when that port is active
;

.program clock

; Sample bits using an external clock (falling edge), and push groups of bits into the RX FIFO.
; - IN pin 0 is the clock pin (and also the pin with data)
; - Autopush is enabled, threshold 1
;
; This program samples data with each falling clock edge,
;  with no wait for data to settle

clklp:
    wait 1 pin 0
    wait 0 pin 0
    in pins, 1
    jmp clklp

% c-sdk {
static inline void clock_program_init(PIO pio, uint sm, uint offset, uint inpin) {
    pio_sm_config c = clock_program_get_default_config(offset);

    // Set the IN base pin to the provided `pin` parameter. This is the data
    // pin, and the next-numbered GPIO is used as the clock pin.
    sm_config_set_in_pins(&c, inpin);

    // Set the pin directions to input at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, inpin, 1, false);

    // Connect these GPIOs to this PIO block
    pio_gpio_init(pio, inpin);

    sm_config_set_in_shift(
        &c,
        false, // Shift-to-right = false (i.e. shift to left)
        true,  // Autopush enabled
        1      // Autopush threshold = 1
    );

    // Load our configuration, and start the program from the beginning
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}
