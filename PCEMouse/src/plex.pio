;
; By Dave Shadoff (c) 2021
;
;
; Interfacing for a PC Engine mouse
;
; Two state machines are in use:
; 
; 1) Multiplexer, free-running:
;     - Select one nybble from the most-recent word from FIFO
;       to be sent to the OUT pins, based on:
;       a) the value of the input SEL line (from joypad)
;       b) a counter sent in the ISR, baed on the number of
;          times the CLR joypad line has gone high in a
;          scanning cycle
;
; 2) Clocked input, which monitors the CLR joypad line for
;    low->high transitions, to set the state counter
; 
;
; This implements state machine #1
;
; Structure of the word sent to the FIFO from the ARM:
; |00000000|00ssbbbb|xxxxxxxx|yyyyyyyy
; Where:
;  - 0 = must be zero
;  - s = state (which nybble to output, 3/2/1/0)
;  - b = button values, arranged in Run/Sel/II/I sequence for PC Engine use
;  - x = mouse 'x' movement; left is {1 - 0x7F} ; right is {0xFF - 0x80 }
;  - y = mouse 'y' movement;  up  is {1 - 0x7F} ; down  is {0xFF - 0x80 }
;
;

.program plex

loop:
     pull  noblock	; if a value was sent, refresh (leave in x otherwise)
     mov   x, osr	; the current value will remain in x

     jmp   PIN, x_y	; SEL pin from joypad input (jump if SEL = '1')
     out   NULL, 16	; buttons: we will remove the least-significant 4 nybbles
     jmp   exitnul

x_y:
     out   NULL, 20	; 
     mov   y, osr	; check current nybble based on down-counter of CLR signals
     mov   osr, x	; 

nulloop:
     jmp   !y, exitnul	; if y==0 at beginning, leave loop
     out   NULL, 4       ; otherwise, lose a nybble
     jmp   y--, nulloop

exitnul:
     out   PINS, 4	; send the nybble to the OUT pins
     jmp   loop 
     

% c-sdk {
static inline void plex_program_init(PIO pio, uint sm, uint offset, uint jmppin, uint outpin) {
    pio_sm_config c = plex_program_get_default_config(offset);

    // Connect these GPIOs to this PIO block
    pio_gpio_init(pio, jmppin);

    pio_gpio_init(pio, outpin);
    pio_gpio_init(pio, outpin + 1);
    pio_gpio_init(pio, outpin + 2);
    pio_gpio_init(pio, outpin + 3);

    // No need to set INPINs; we need a JMP pin though

    // Set the JMP pin to the provided `jmppin` parameter.
    sm_config_set_jmp_pin (&c, jmppin);

    // Set the OUT pin to the provided `outpin` parameter. This is where the data is sent out
    sm_config_set_out_pins(&c, outpin, 4);

    // Set the pin directions to output at the PIO
    pio_sm_set_consecutive_pindirs(pio, sm, outpin, 4, true);

    sm_config_set_out_shift(
        &c,
        true,  // Shift-to-right = true
        false, // Autopull disabled
        31     // Autopull threshold = 31
    );

    // Load our configuration, and start the program from the beginning
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}
